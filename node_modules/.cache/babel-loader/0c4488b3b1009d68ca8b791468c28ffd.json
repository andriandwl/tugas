{"ast":null,"code":"const BASE_URL = \"https://jcc.brandingyou.id/api\";\n\nfunction getAccessToken() {\n  return localStorage.getItem(\"accessToken\");\n}\n\nfunction putAccessToken(accessToken) {\n  return localStorage.setItem(\"accessToken\", accessToken);\n}\n\nasync function fetchWithToken(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return fetch(url, { ...options,\n    headers: { ...options.headers,\n      Authorization: `Bearer ${getAccessToken()}`\n    }\n  });\n}\n\nasync function login(_ref) {\n  let {\n    username,\n    password\n  } = _ref;\n  const response = await fetch(`${BASE_URL}/login`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: `Bearer ${getAccessToken()}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  const responseJson = await response.json();\n\n  if (responseJson.meta.status !== \"success\") {\n    alert(responseJson.meta.message);\n    return {\n      meta: true,\n      data: null\n    };\n  }\n\n  return {\n    meta: false,\n    data: responseJson.data\n  };\n}\n\nasync function register(_ref2) {\n  let {\n    name,\n    email,\n    username,\n    password\n  } = _ref2;\n  const response = await fetch(`${BASE_URL}/register`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${getAccessToken()}`\n    },\n    body: JSON.stringify({\n      name,\n      email,\n      username,\n      password\n    })\n  });\n  const responseJson = await response.json();\n\n  if (responseJson.meta.status !== \"success\") {\n    alert(responseJson.meta.message);\n    return {\n      meta: true\n    };\n  }\n\n  return {\n    meta: false\n  };\n}\n\nasync function getPost() {\n  const response = await fetchWithToken(`${BASE_URL}/post`);\n  const responseJson = await response.json();\n\n  if (responseJson.meta.status !== \"success\") {\n    return {\n      meta: true,\n      data: null\n    };\n  }\n\n  return {\n    meta: false,\n    data: responseJson.data\n  };\n}\n\nasync function addPost(_ref3) {\n  let {\n    title,\n    content,\n    image\n  } = _ref3;\n  const response = await fetchWithToken(`${BASE_URL}/post`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify({\n      title,\n      content,\n      image\n    })\n  });\n  const responseJson = await response.json();\n\n  if (responseJson.meta.status !== \"success\") {\n    return {\n      meta: true,\n      data: null\n    };\n  }\n\n  return {\n    meta: false,\n    data: responseJson.data\n  };\n}\n\nasync function deletePost(id) {\n  const response = await fetchWithToken(`${BASE_URL}/post/${id}`, {\n    method: \"DELETE\"\n  });\n  const responseJson = await response.json();\n\n  if (responseJson.meta.status !== \"success\") {\n    return {\n      meta: true,\n      data: null\n    };\n  }\n\n  return {\n    meta: false,\n    data: responseJson.data\n  };\n}\n\nasync function editPost(_ref4) {\n  let {\n    id,\n    title,\n    content,\n    image\n  } = _ref4;\n  const response = await fetchWithToken(`${BASE_URL}/post/${id}`, {\n    method: \"DELETE\"\n  });\n  const responseJson = await response.json();\n\n  if (responseJson.meta.status !== \"success\") {\n    return {\n      meta: true,\n      data: null\n    };\n  }\n\n  return {\n    meta: false,\n    data: responseJson.data\n  };\n}\n\nexport { login, register, putAccessToken, deletePost, fetchWithToken, getPost, addPost, getAccessToken, editPost };","map":{"version":3,"names":["BASE_URL","getAccessToken","localStorage","getItem","putAccessToken","accessToken","setItem","fetchWithToken","url","options","fetch","headers","Authorization","login","username","password","response","method","Accept","body","JSON","stringify","responseJson","json","meta","status","alert","message","data","register","name","email","getPost","addPost","title","content","image","deletePost","id","editPost"],"sources":["D:/React/project/nyobian/src/utils/api.jsx"],"sourcesContent":["const BASE_URL = \"https://jcc.brandingyou.id/api\";\r\n\r\nfunction getAccessToken() {\r\n  return localStorage.getItem(\"accessToken\");\r\n}\r\n\r\nfunction putAccessToken(accessToken) {\r\n  return localStorage.setItem(\"accessToken\", accessToken);\r\n}\r\n\r\nasync function fetchWithToken(url, options = {}) {\r\n  return fetch(url, {\r\n    ...options,\r\n    headers: {\r\n      ...options.headers,\r\n      Authorization: `Bearer ${getAccessToken()}`,\r\n    },\r\n  });\r\n}\r\nasync function login({ username, password }) {\r\n  const response = await fetch(`${BASE_URL}/login`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      Authorization: `Bearer ${getAccessToken()}`,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ username, password }),\r\n  });\r\n\r\n  const responseJson = await response.json();\r\n  if (responseJson.meta.status !== \"success\") {\r\n    alert(responseJson.meta.message);\r\n    return { meta: true, data: null };\r\n  }\r\n\r\n  return { meta: false, data: responseJson.data };\r\n}\r\n\r\nasync function register({ name, email, username, password }) {\r\n  const response = await fetch(`${BASE_URL}/register`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${getAccessToken()}`,\r\n    },\r\n    body: JSON.stringify({ name, email, username, password }),\r\n  });\r\n\r\n  const responseJson = await response.json();\r\n\r\n  if (responseJson.meta.status !== \"success\") {\r\n    alert(responseJson.meta.message);\r\n    return { meta: true };\r\n  }\r\n\r\n  return { meta: false };\r\n}\r\n\r\nasync function getPost() {\r\n  const response = await fetchWithToken(`${BASE_URL}/post`);\r\n  const responseJson = await response.json();\r\n\r\n  if (responseJson.meta.status !== \"success\") {\r\n    return { meta: true, data: null };\r\n  }\r\n\r\n  return { meta: false, data: responseJson.data };\r\n}\r\n\r\nasync function addPost({ title, content, image }) {\r\n  const response = await fetchWithToken(`${BASE_URL}/post`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      title,\r\n      content,\r\n      image,\r\n    }),\r\n  });\r\n\r\n  const responseJson = await response.json();\r\n\r\n  if (responseJson.meta.status !== \"success\") {\r\n    return {\r\n      meta: true,\r\n      data: null,\r\n    };\r\n  }\r\n\r\n  return {\r\n    meta: false,\r\n    data: responseJson.data,\r\n  };\r\n}\r\nasync function deletePost(id) {\r\n  const response = await fetchWithToken(`${BASE_URL}/post/${id}`, {\r\n    method: \"DELETE\",\r\n  });\r\n\r\n  const responseJson = await response.json();\r\n\r\n  if (responseJson.meta.status !== \"success\") {\r\n    return { meta: true, data: null };\r\n  }\r\n\r\n  return { meta: false, data: responseJson.data };\r\n}\r\n\r\nasync function editPost({ id, title, content, image }) {\r\n  const response = await fetchWithToken(`${BASE_URL}/post/${id}`, {\r\n    method: \"DELETE\",\r\n  });\r\n\r\n  const responseJson = await response.json();\r\n\r\n  if (responseJson.meta.status !== \"success\") {\r\n    return { meta: true, data: null };\r\n  }\r\n\r\n  return { meta: false, data: responseJson.data };\r\n}\r\n\r\nexport {\r\n  login,\r\n  register,\r\n  putAccessToken,\r\n  deletePost,\r\n  fetchWithToken,\r\n  getPost,\r\n  addPost,\r\n  getAccessToken,\r\n  editPost,\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}